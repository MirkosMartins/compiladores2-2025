# -*- coding: utf-8 -*-
"""AFD.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RS5bdEVDJQRM-hc3FPSKU9fytzKv6Z1V
"""
import pandas as pd


class AFD:
    estados = []
    simbolos = []
    estadoInicial = ''
    estadosFinais = []
    regrasTransicao = []

    def __init__(self, arqConfiguracao):
        linhas = arqConfiguracao.readlines()
        if len(linhas) < 5:
            print('Erro')
            return
        else:
            self.estados = linhas[0].rstrip().split(',')
            self.simbolos = linhas[1].rstrip().split(',')
            self.estadoInicial = linhas[2].rstrip()
            self.estadosFinais = linhas[3].rstrip().split(',')
            for i in linhas[4:]:
                self.regrasTransicao += i.rstrip().split(',')
    def reconhece(self, palavra):
        if not self.regrasTransicao:
            return "erro ao iniciar o afd"
        for caracter in palavra.rstrip():
            if caracter not in self.simbolos:
                return "Símbolo não reconhecido pelo AFD!"
        estadoAtual = self.estadoInicial
        for caracter in palavra.rstrip():
            proximo_estado = None
            for regra in self.regrasTransicao:
                if regra.startswith(estadoAtual + ':' + caracter):
                    proximo_estado = regra.split(':')[2]
                    break
            if proximo_estado is None:
                return "transicao invalida"            
            estadoAtual = proximo_estado
        for ef in self.estadosFinais:
            if ef.startswith(estadoAtual):
                return ef.split(':')[1]        
        return "erro estado nao final"
try:
    arquivo_config = open('config.txt')
    afd = AFD(arquivo_config)
    arquivo_config.close()
except FileNotFoundError:
    print("config nao encontrado")
    exit()
lista_de_tokens = []
token_id_counter = 1
try:
    with open('code.c', 'r') as arquivo_codigo:
        numero_linha = 1
        for linha in arquivo_codigo:
            token_texto = linha.strip()
            if token_texto:
                print(f"Linha {numero_linha}: '{token_texto}' -> ", end="")
                tipo_do_token = afd.reconhece(token_texto)
                if not tipo_do_token.startswith("ERRO:"):
                    print('reconhecido como', tipo_do_token)
                    lista_de_tokens.append({
                        'id': token_id_counter,
                        'token': token_texto,
                        'tipo': tipo_do_token
                    })
                    token_id_counter += 1
                else:
                    motivo = tipo_do_token.split(': ')[1]
                    print(f"nao reconhecido: ({motivo}).")
            
            numero_linha += 1
            
    if lista_de_tokens:
        tabela = pd.DataFrame(lista_de_tokens)
        nome_arquivo_csv = 'tab-simbolos.csv'
        tabela.to_csv(nome_arquivo_csv, index=False, encoding='utf-8')
    else:
        print("\n nenhum token valido")

except FileNotFoundError:
    print("arquivo c nao encontrado")
    exit()
