# -*- coding: utf-8 -*-
"""AFD.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RS5bdEVDJQRM-hc3FPSKU9fytzKv6Z1V
"""

import pandas as pd
import utils

class AFD:
  estados = []
  simbolos = []
  estadoInicial = ''
  estadosFinais = []
  regrasTransicao = []
  #construtor do AFD
  def __init__(self,arqConfiguracao):
    linhas = arqConfiguracao.readlines()
    if len(linhas)<5:
      print ('Erro')
      return 0
    else:
        self.estados = linhas[0].rstrip().split(',')
        self.simbolos = linhas[1].rstrip().split(',')
        self.estadoInicial = linhas[2].rstrip()
        self.estadosFinais = linhas[3].rstrip().split(',')
        for i in linhas[4:]:
            #EFB
            self.regrasTransicao += i.rstrip().split(',')
        self._regra_virgula()
  
  def _regra_virgula(self):
        self.regrasTransicao.append("q0:,:q7")
        self.simbolos.append(',')

  def reconhece(self,palavra: str):
    if len(self.regrasTransicao)>0:
        # for caracter in palavra.rstrip():
        #     if caracter not in self.simbolos:
        #         print('Símbolo não reconhecido pelo AFD!')
        #         return 0
        estadoAtual = self.estadoInicial
        token = ""
        for caracter in palavra.rstrip():
            reconhecido=False
            for regra in self.regrasTransicao:
                if regra.startswith(estadoAtual+':'+caracter):
                    estadoAtual = regra.split(':')[2]
                    reconhecido = True
                    token +=palavra[0]
                    palavra = palavra.removeprefix(palavra[0])
                    break
            if caracter not in self.simbolos:
                print("não tem o caracter", palavra)
                palavra = palavra.removeprefix(palavra[0])
                break
            if not reconhecido:
                print("Não reconhecido", palavra)
                # palavra = palavra.removeprefix(palavra[0])
                break
        
        for ef in self.estadosFinais:
            if ef.startswith(estadoAtual):
                if not reconhecido:
                    resultado = [[token, ef.split(':')[1]]]
                    tokens_restantes = self.reconhece(palavra)
                    if tokens_restantes:
                        resultado.extend(tokens_restantes)
                    return resultado
                return [[token, ef.split(':')[1]]]
    else:
        print('não iniciado')
        return 0

arquivo = open('config.txt')
afd = AFD(arquivo)
code = open("code.c").readlines()
tabela = pd.DataFrame(columns=["ID","token","tipo","l","c"])
i=1
print(code)
code = [s.strip() for s in code]
for termo in code:
    result = afd.reconhece(termo.rstrip())
    for r in result:
        
        tb = pd.DataFrame({
            "ID": [i],
            "token": [r[0]],
            "tipo": [utils.is_pr(r[1], r[0])],
            "l": [i],
            "c": ["-"],
            "ref": ["-"]
        })
        i+=1
        tabela = pd.concat([tabela, tb], ignore_index=True)

pilhas = {"(": [], "[": [], "{": []}

for index, row in tabela.iterrows():
    token = row['token']
    if token in "([{":
        pilhas[token].append(row['ID'])
    elif token in ")]}":
        abertura = {"}": "{", "]": "[", ")": "("}[token]
        if pilhas[abertura]:
            id_abertura = pilhas[abertura].pop()
            tabela.loc[tabela['ID'] == row['ID'], 'ref'] = id_abertura
        else:
            tabela.loc[tabela['ID'] == row['ID'], 'ref'] = "-"

tabela.to_csv("tab-simbolos.csv", index=False)