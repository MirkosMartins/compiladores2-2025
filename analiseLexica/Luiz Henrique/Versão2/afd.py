
# -*- coding: utf-8 -*-
"""AFD.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RS5bdEVDJQRM-hc3FPSKU9fytzKv6Z1V
"""

import pandas


class AFD:
  palavras_reservadas = {'int', 'return', 'if', 'else', 'while', 'for', 'break', 'continue', 'void', 'char', 'float', 'double', 'struct', 'typedef', 'const', 'static', 'switch', 'case', 'default', 'do', 'sizeof', 'true', 'false'}
  estados = []
  simbolos = []
  estadoInicial = ''
  estadosFinais = []
  regrasTransicao = []
  #construtor do AFD
  def __init__(self,arqConfiguracao):
    self.pilha_parenteses = []
    self.pilha_colchetes = []
    self.pilha_chaves = []
    self.contador_tokens = 0
    linhas = arqConfiguracao.readlines()
    if len(linhas)<5:
      print ('Erro')
      return 0
    else:
      self.estados = linhas[0].rstrip().split(',')
      self.simbolos = linhas[1].rstrip().split(',')
      self.estadoInicial = linhas[2].rstrip()
      self.estadosFinais = linhas[3].rstrip().split(',')
      for i in linhas[4:]:
        #EFB
        self.regrasTransicao += i.rstrip().split(',')
        self.virgula()
        
  def virgula(self):
        self.regrasTransicao.append("q0:,:q7")
        self.simbolos.append(',')
  
  def analisar_codigo(self, codigo):
    tokens = []
    pos = 0
    atual = ""
    linha_atual = 1
    self.contador_tokens = 0
    usado_parenteses = set()  
    usado_colchetes = set()   
    usado_chaves = set()      
    
    while pos < len(codigo):
        char = codigo[pos]
        
        # Tratamento de nova linha
        if char == '\n':
            if atual:
                self.contador_tokens += 1
                self.processar_token(atual, tokens, linha_atual)
                atual = ""
            linha_atual += 1
            pos += 1
            continue
        
        # Tratamento de caracteres especiais
        if char in ['+', '-', '=', ';', ',', '(', ')', '{', '}', '[', ']']:
            if atual:
                self.contador_tokens += 1
                self.processar_token(atual, tokens, linha_atual)
                atual = ""
            
            self.contador_tokens += 1
            
            if char == '(':
                tokens.append(('abrePar', char, linha_atual, None))
            elif char == ')':
                ref_id = None
                for idx in range(len(tokens)-1, -1, -1):
                    if tokens[idx][0] == 'abrePar' and idx + 1 not in usado_parenteses:
                        ref_id = idx + 1
                        usado_parenteses.add(ref_id)
                        break
                tokens.append(('fechaPar', char, linha_atual, ref_id))
                
            elif char == '[':
                tokens.append(('abreCol', char, linha_atual, None))
            elif char == ']':
                ref_id = None
                for idx in range(len(tokens)-1, -1, -1):
                    if tokens[idx][0] == 'abreCol' and idx + 1 not in usado_colchetes:
                        ref_id = idx + 1
                        usado_colchetes.add(ref_id)
                        break
                tokens.append(('fechaCol', char, linha_atual, ref_id))
                
            elif char == '{':
                tokens.append(('abreCha', char, linha_atual, None))
            elif char == '}':
                ref_id = None
                for idx in range(len(tokens)-1, -1, -1):
                    if tokens[idx][0] == 'abreCha' and idx + 1 not in usado_chaves:
                        ref_id = idx + 1
                        usado_chaves.add(ref_id)
                        break
                tokens.append(('fechaCha', char, linha_atual, ref_id))
            
            else:
                self.processar_token(char, tokens, linha_atual)
            
            pos += 1
            continue
        
        atual += char
        pos += 1
    
    if atual:
        self.contador_tokens += 1
        self.processar_token(atual, tokens, linha_atual)
    
    return tokens
    
  def eh_palavra_reservada(self, token):
        return token in self.palavras_reservadas
  
  def processar_token(self, token, tokens, linha_atual):
    estado_atual = self.estadoInicial
    for char in token:
        encontrou = False
        for regra in self.regrasTransicao:
            partes = regra.split(':')
            if len(partes) == 3 and partes[0] == estado_atual and partes[1] == char:
                estado_atual = partes[2]
                encontrou = True
                break
        if not encontrou:
            tokens.append(('erro', token, linha_atual, None))
            return

    for ef in self.estadosFinais:
        if ef.startswith(estado_atual + ':'):
            tipo = ef.split(':')[1]
            tokens.append((tipo, token, linha_atual, None))
            return
    
    tokens.append(('erro', token, linha_atual, None))

  def reconhece(self,palavra):
    if len(self.regrasTransicao)>0:
      for caracter in palavra.rstrip():
        if caracter not in self.simbolos:
          print('Símbolo não reconhecido pelo AFD!')
          return 0
      estadoAtual = self.estadoInicial
      for caracter in palavra.rstrip():
        for regra in self.regrasTransicao: 
          if regra.startswith(estadoAtual+':'+caracter):
            estadoAtual = regra.split(':')[2]
            break
      for ef in self.estadosFinais:
        if ef.startswith(estadoAtual):
          print('Símbolo',palavra,'reconhecido como',ef.split(':')[1])
    else:
      print('não iniciado')
      return 0

arquivo = open('config.txt')
afd = AFD(arquivo)
tabela = []

with open("code.c", "r") as arquivoC:
    codigo = arquivoC.read()
    tokens = afd.analisar_codigo(codigo)
    
tabela = []
for i, (tipo, token, linha, ref_id) in enumerate(tokens, 1):
    tabela.append([i, token, tipo, linha, ref_id]) 

import pandas as pd
df = pd.DataFrame(tabela, columns=["ID", "Token", "Símbolo", "Linha", "Ref_ID"])
print(df)
df.to_csv("tabela_tokens.csv", index=False)

