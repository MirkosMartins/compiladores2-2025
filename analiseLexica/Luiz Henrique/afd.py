
# -*- coding: utf-8 -*-
"""AFD.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RS5bdEVDJQRM-hc3FPSKU9fytzKv6Z1V
"""

class AFD:
  estados = []
  simbolos = []
  estadoInicial = ''
  estadosFinais = []
  regrasTransicao = []
  #construtor do AFD
  def __init__(self,arqConfiguracao):
    linhas = arqConfiguracao.readlines()
    if len(linhas)<5:
      print ('Erro')
      return 0
    else:
      self.estados = linhas[0].rstrip().split(',')
      self.simbolos = linhas[1].rstrip().split(',')
      self.estadoInicial = linhas[2].rstrip()
      self.estadosFinais = linhas[3].rstrip().split(',')
      for i in linhas[4:]:
        #EFB
        self.regrasTransicao += i.rstrip().split(',')

  def reconhece(self,palavra):
    if len(self.regrasTransicao)>0:
      for caracter in palavra.rstrip():
        if caracter not in self.simbolos:
          print('Símbolo não reconhecido pelo AFD!')
          return 0
      estadoAtual = self.estadoInicial
      for caracter in palavra.rstrip():
        for regra in self.regrasTransicao: #isso não é o mais otimizado
          if regra.startswith(estadoAtual+':'+caracter):
            #print(regra)
            estadoAtual = regra.split(':')[2]
            #print(estadoAtual)
            break
      #vou buscar se o estadoAtual é um dos estados Finais!
      for ef in self.estadosFinais:
        if ef.startswith(estadoAtual):
          print('Símbolo',palavra,'reconhecido como',ef.split(':')[1])
    else:
      print('não iniciado')
      return 0

arquivo = open('config.txt')
afd = AFD(arquivo)
tabela = []
with open("code.c", "r") as arquivoC:
    for i, linha in enumerate(arquivoC, start=1): 
        termo = linha.strip()
        if termo:
            simbolo = None
            estadoAtual = afd.estadoInicial
            valido = True
            for caracter in termo:
                if caracter not in afd.simbolos:
                    simbolo = "Símbolo não reconhecido"
                    valido = False
                    break
                for regra in afd.regrasTransicao:
                    if regra.startswith(estadoAtual+':'+caracter):
                        estadoAtual = regra.split(':')[2]
                        break

            if valido:
                for ef in afd.estadosFinais:
                    if ef.startswith(estadoAtual):
                        simbolo = ef.split(':')[1]

            tabela.append([len(tabela)+1, termo, simbolo, i])

from tabulate import tabulate

print(tabulate(tabela, headers=["ID", "Token", "Símbolo", "Linha", "Coluna"], tablefmt="grid"))

#inicio PRINTS
#print(afd.estados)
#print(afd.simbolos)
#print(afd.estadoInicial)
#print(afd.estadosFinais)
#print(afd.regrasTransicao)
#fim PRINTS
afd.reconhece(termo)