
# -*- coding: utf-8 -*-
"""AFD.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RS5bdEVDJQRM-hc3FPSKU9fytzKv6Z1V
"""

import pandas


class AFD:
  estados = []
  simbolos = []
  estadoInicial = ''
  estadosFinais = []
  regrasTransicao = []
  #construtor do AFD
  def __init__(self,arqConfiguracao):
    linhas = arqConfiguracao.readlines()
    if len(linhas)<5:
      print ('Erro')
      return 0
    else:
      self.estados = linhas[0].rstrip().split(',')
      self.simbolos = linhas[1].rstrip().split(',')
      self.estadoInicial = linhas[2].rstrip()
      self.estadosFinais = linhas[3].rstrip().split(',')
      for i in linhas[4:]:
        #EFB
        self.regrasTransicao += i.rstrip().split(',')
        self.virgula()
        
  def virgula(self):
        self.regrasTransicao.append("q0:,:q7")
        self.simbolos.append(',')

  def analisar_codigo(self, codigo):
    tokens = []
    i = 0
    atual = ""
    
    while i < len(codigo):
        char = codigo[i]
        
        # Ignora espaços em branco
        if char.isspace():
            if atual:
                self.processar_token(atual, tokens)
                atual = ""
            i += 1
            continue
            
        if char in ['+', '-', '=', ';']:
            if atual:
                self.processar_token(atual, tokens)
                atual = ""
            self.processar_token(char, tokens)
            i += 1
            continue
            
        # Acumula caracteres para identificadores/números
        atual += char
        i += 1
        
        # Processa último token
        if i == len(codigo) and atual:
            self.processar_token(atual, tokens)
            
    return tokens

  def processar_token(self, token, tokens):
    estadoAtual = self.estadoInicial
    tipo = None
    
    for char in token:
        if char not in self.simbolos:
            tipo = "Símbolo não reconhecido"
            break
        
        for regra in self.regrasTransicao:
            if regra.startswith(estadoAtual + ':' + char):
                estadoAtual = regra.split(':')[2]
                break
                
    if not tipo:
        for ef in self.estadosFinais:
            if ef.startswith(estadoAtual):
                tipo = ef.split(':')[1]
                break
                
    tokens.append((token, tipo))

  def reconhece(self,palavra):
    if len(self.regrasTransicao)>0:
      for caracter in palavra.rstrip():
        if caracter not in self.simbolos:
          print('Símbolo não reconhecido pelo AFD!')
          return 0
      estadoAtual = self.estadoInicial
      for caracter in palavra.rstrip():
        for regra in self.regrasTransicao: 
          if regra.startswith(estadoAtual+':'+caracter):
            estadoAtual = regra.split(':')[2]
            break
      for ef in self.estadosFinais:
        if ef.startswith(estadoAtual):
          print('Símbolo',palavra,'reconhecido como',ef.split(':')[1])
    else:
      print('não iniciado')
      return 0

arquivo = open('config.txt')
afd = AFD(arquivo)
tabela = []

with open("code.c", "r") as arquivoC:
    codigo = arquivoC.read()
    tokens = afd.analisar_codigo(codigo)
    
tabela = []
for i, (token, tipo) in enumerate(tokens, 1):
    tabela.append([i, token, tipo, 1])  

import pandas as pd
df = pd.DataFrame(tabela, columns=["ID", "Token", "Símbolo", "Linha"])
print(df)
df.to_csv("tabela_tokens.csv", index=False)

#inicio PRINTS
#print(afd.estados)
#print(afd.simbolos)
#print(afd.estadoInicial)
#print(afd.estadosFinais)
#print(afd.regrasTransicao)
#fim PRINTS